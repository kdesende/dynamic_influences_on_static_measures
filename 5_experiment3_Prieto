#5. Analysis of Experiment 3, data by Prieto et al.
rm(list=ls())
error.bar <- function(x, y, upper, lower=upper, length=0.1,...){
  if(length(x) != length(y) | length(y) !=length(lower) | length(lower) != length(upper))
    stop("vectors must be same length")
  arrows(x,y+upper, x, y-lower, angle=90, code=3, length=length, ...)
}
# to source, compile and run C++ functions
library(Rcpp) 
sourceCpp("DDM_with_confidence_slow.cpp") # this will give R access to the DDM_with_confidence_slow function 
#Load code to compute metad
source('computeMetaDa.R')
#Load the heatmap reprenseint p(correct|evt,t,x)
pcor <- as.matrix(read.table('pcor_5secs.txt',header=T)) #sigma=.1
pcorVector <- as.vector(pcor)
evUp <- seq(0,1,by=.01);

#load the data
Prieto <- read.csv('data_Prieto_unpub.csv',fileEncoding="UTF-8-BOM")

subs <- sort(unique(Prieto$Subj_idx));N<-length(subs)
meanerr <- with(Prieto,aggregate(Accuracy,by=list(Subj_idx=Subj_idx),mean))
plot(meanerr$x) #

#exclude RTs < .1 
hist(Prieto$RT_dec)
Prieto <- subset(Prieto,RT_dec > .1)

#recode some variables
Prieto$sub <- Prieto$Subj_idx;Prieto$rt <- Prieto$RT_dec;Prieto$rtcj <- Prieto$RT_conf;Prieto$cj <- Prieto$Confidence;Prieto$cor <- Prieto$Accuracy;Prieto$stim <- Prieto$Stimulus
subs <- sort(unique(Prieto$sub));N<-length(subs)

#Create a function that compares observed data to simulate data using quantile optimisation
chi_square_optim_prieto <- function(params, observations, returnFit){
  
  #First, generate predictions:
  # With different parameters, as if we don't know the real ones)
  names(params) <- c('v','a','ter','z','ntrials','sigma','dt','t2time','vratio','add_mean','add_sd')
  predictions <- data.frame(DDM_with_confidence_slow(v=params['v'],a=params['a'],ter=params['ter'],z=params['z'],ntrials=params['ntrials'],s=params['sigma'],dt=params['dt'],t2time=params['t2time'],postdriftmod=params['vratio']))
  names(predictions) <- c('rt','resp','cor','raw_evidence2','rt2','cj')
  predictions$evidence2 <- predictions$raw_evidence2
  
  #1. Convert cj into p(correct), so first flip
  #1.1 starting point is a*z, so if you reach the upper bound evidence2 should be evidence2-z*a
  predictions$evidence2[predictions$resp==1] <- predictions$evidence2[predictions$resp==1] - params['z']*params['a']
  #if you reach the lower bound evidence2 should be evidence2+z*a 
  predictions$evidence2[predictions$resp==-1] <- (-predictions$evidence2[predictions$resp==-1]) + params['z']*params['a']
  
  #match to the heatmap
  predictions$evidence2 <- predictions$evidence2*.1 #the heatmap is created using sigma=.1
  predictions$closest_evdnc2 <- match.closest(abs(predictions$evidence2),evUp) 
  predictions$temprt2 <- predictions$rt2;
  predictions$temprt2[predictions$temprt2>5] <- 5 #heatmap doesn't go higher
  predictions$temprt2 <- predictions$temprt2*(dim(pcor)[1]/5) #scale with the heatmap, between 0 and 2000
  
  #pcorVector is aggregatedd per evidence row, so first accumulate up until evidence-1, and then add RT
  #sigma is scaled until it's .1, so use pcorVevector
  predictions$conft2 <- pcorVector[(predictions$closest_evdnc2-1)*dim(pcor)[1]+round(predictions$temprt2)]
  
  #correct trials where evidence2 < 0 should take the flip into account (conf = conf - 2*(conf-.5))
  predictions$conft2[predictions$resp==1&predictions$evidence2<0] <- predictions$conft2[predictions$resp==1&predictions$evidence2<0] - 2*(predictions$conft2[predictions$resp==1&predictions$evidence2<0]-.5) 
  #error trials where evidence2 has < 0 should take the flip into account (note that this is ALSo <0 because i've already flipped evidence beforehand)
  predictions$conft2[predictions$resp==-1&predictions$evidence2<0] <- predictions$conft2[predictions$resp==-1&predictions$evidence2<0] - 2*(predictions$conft2[predictions$resp==-1&predictions$evidence2<0]-.5)
  
  #Use heatmap confidence instead of raw evidence
  predictions$cj <- predictions$conft2

  #2. Linear scaling of confidence 
  predictions$cj <- (predictions$cj + params['add_mean'])/params['add_sd'] 
  predictions$cj[predictions$cj<1] <- 1
  predictions$cj[predictions$cj>6] <- 6
  
  # again, separate the predections according to the response
  c_predicted <- predictions[predictions$cor == 1,]
  e_predicted <- predictions[predictions$cor == 0,]
  
  # to make the next step easier, lets sort the predictions for correct and errors
  c_predicted_rt <- sort(c_predicted$rt)
  e_predicted_rt <- sort(e_predicted$rt)
  
  #if we're only simulating data, return the predictions
  if(returnFit==0){ 
    return(predictions[,c('rt','cor','cj')])
    
    #If we are fitting the model, now compare these predictions to the observations 
  }else{ 
    
    # First, separate the data in correct and error trials
    c_observed <- observations[observations$cor == 1,]
    e_observed <- observations[observations$cor == 0,]
    
    # Now, get the quantile RTs on the "observed data" for correct and error distributions separately (for quantiles .1, .3, .5, .7, .9)
    c_quantiles <- quantile(c_observed$rt, probs = c(.1,.3,.5,.7,.9), names = FALSE)
    e_quantiles <- quantile(e_observed$rt, probs = c(.1,.3,.5,.7,.9), names = FALSE)
    
    # to combine correct and incorrect we scale the expected interquantile probability by the proportion of correct and incorect respectively
    prop_obs_c <- dim(c_observed)[1] / dim(observations)[1]
    prop_obs_e <- dim(e_observed)[1] / dim(observations)[1]
    
    c_obs_proportion = prop_obs_c * c(.1, .2, .2, .2, .2, .1)
    e_obs_proportion = prop_obs_e * c(.1, .2, .2, .2, .2, .1)
    obs_props <- c(c_obs_proportion,e_obs_proportion)
    
    # now, get the proportion of responses that fall between the observed quantiles when applied to the predicted data (scale by N?)
    c_pred_proportion <- c(
      sum(c_predicted_rt <= c_quantiles[1]),
      sum(c_predicted_rt <= c_quantiles[2]) - sum(c_predicted_rt <= c_quantiles[1]),
      sum(c_predicted_rt <= c_quantiles[3]) - sum(c_predicted_rt <= c_quantiles[2]),
      sum(c_predicted_rt <= c_quantiles[4]) - sum(c_predicted_rt <= c_quantiles[3]),
      sum(c_predicted_rt <= c_quantiles[5]) - sum(c_predicted_rt <= c_quantiles[4]),
      sum(c_predicted_rt > c_quantiles[5])
    ) / dim(predictions)[1]
    
    e_pred_proportion <- c(
      sum(e_predicted_rt <= e_quantiles[1]),
      sum(e_predicted_rt <= e_quantiles[2]) - sum(e_predicted_rt <= e_quantiles[1]),
      sum(e_predicted_rt <= e_quantiles[3]) - sum(e_predicted_rt <= e_quantiles[2]),
      sum(e_predicted_rt <= e_quantiles[4]) - sum(e_predicted_rt <= e_quantiles[3]),
      sum(e_predicted_rt <= e_quantiles[5]) - sum(e_predicted_rt <= e_quantiles[4]),
      sum(e_predicted_rt > e_quantiles[5])
    ) / dim(predictions)[1]
    pred_props <- c(c_pred_proportion,e_pred_proportion)
    
    # avoid zeros in the the data (because of division by predictions for chi square statistic) -> set to small number
    pred_props[pred_props==0] <- .0000001
    
    # Now, do the same for confidence
    # Get the quantile Cjs on the "observed data" for correct and error distributions separately (for quantiles .1, .3, .5, .7, .9)
    c_quantiles_cj <- quantile(c_observed$cj, probs = c(.1,.3,.5,.7,.9), names = FALSE)
    e_quantiles_cj <- quantile(e_observed$cj, probs = c(.1,.3,.5,.7,.9), names = FALSE)
    
    # to make the next step easier, lets sort the predictions for correct and errors
    c_predicted_cj <- sort(c_predicted$cj)
    e_predicted_cj <- sort(e_predicted$cj)
    
    # now, get the proportion of responses that fall between the observed quantiles when applied to the predicted data (scale by N?)
    c_pred_proportion_cj <- c(
      sum(c_predicted_cj <= c_quantiles_cj[1]),
      sum(c_predicted_cj <= c_quantiles_cj[2]) - sum(c_predicted_cj <= c_quantiles_cj[1]),
      sum(c_predicted_cj <= c_quantiles_cj[3]) - sum(c_predicted_cj <= c_quantiles_cj[2]),
      sum(c_predicted_cj <= c_quantiles_cj[4]) - sum(c_predicted_cj <= c_quantiles_cj[3]),
      sum(c_predicted_cj <= c_quantiles_cj[5]) - sum(c_predicted_cj <= c_quantiles_cj[4]),
      sum(c_predicted_cj > c_quantiles_cj[5])
    ) / dim(predictions)[1]
    
    e_pred_proportion_cj <- c(
      sum(e_predicted_cj <= e_quantiles_cj[1]),
      sum(e_predicted_cj <= e_quantiles_cj[2]) - sum(e_predicted_cj <= e_quantiles_cj[1]),
      sum(e_predicted_cj <= e_quantiles_cj[3]) - sum(e_predicted_cj <= e_quantiles_cj[2]),
      sum(e_predicted_cj <= e_quantiles_cj[4]) - sum(e_predicted_cj <= e_quantiles_cj[3]),
      sum(e_predicted_cj <= e_quantiles_cj[5]) - sum(e_predicted_cj <= e_quantiles_cj[4]),
      sum(e_predicted_cj > e_quantiles_cj[5])
    ) / dim(predictions)[1]
    pred_props_cj <- c(c_pred_proportion_cj,e_pred_proportion_cj)
    
    # avoid zeros in the the data (because of division by predictions for chi square statistic) -> set to small number
    pred_props_cj[pred_props_cj==0] <- .0000001
    
    # Combine the quantiles for rts and cj
    obs_props <- c(obs_props,obs_props)
    pred_props <- c(pred_props,pred_props_cj)
    # calculate chi square
    chiSquare = sum( ( (obs_props - pred_props) ^ 2) / pred_props )
    
    #Return chiSquare
    return(chiSquare)
  }
}

#fit the model
dprime_prieto <- rep(NA,N);mratio_prieto <- rep(NA,N);bound_prieto <- rep(NA,N);drift_prieto <- rep(NA,N);ter_prieto <- rep(NA,N);vratio_prieto <- rep(NA,N);conf_rt_prieto <- rep(NA,N);mean_acc_prieto <- rep(NA,N);add_mean_prieto <- rep(NA,N);add_sd_prieto <- rep(NA,N);add_peak_35_prieto <- rep(NA,N) 
for(i in 1:N){
  print(paste('Running participant',i,'from',N))
  
  tempDat <- subset(Prieto,sub==subs[i]);
  conf_rt_prieto[i] <- median(tempDat$rtcj)
  tempDat <- tempDat[,c('rt','cor','Response','cj','stim')]
  mean_acc_prieto[i] <- mean(tempDat$cor);
  tempDat$conf <- tempDat$cj
  #Load the fitted data if they exist
  if(file.exists(paste0('Results Prieto/fits/results_sub_',i,'.Rdata'))){
    load(paste0('Results Prieto/fits/results_sub_',i,'.Rdata'))
  }else{
    #fit the model
    optimal_params <- DEoptim(chi_square_optim_prieto, # function to optimize
                              lower = c(0, .5, 0,   .5, 5000, 1, .001, conf_rt_prieto[i], 0,   0, 0), # v,a,ter,z,ntrials,sigma,dt,t2time,vratio,add_mean,add_sd
                              upper = c(3,  4, 1.5, .5, 5000, 1, .001, conf_rt_prieto[i], 1.5,20, 4), # 
                              observations = tempDat,
                              returnFit=1,control=c(itermax=500))
    results <- summary(optimal_params)
    save(results, file=paste0('Results prieto/fits/results_sub_',i,'.Rdata'))
  }
  drift_prieto[i] <- results$optim$bestmem[1]
  bound_prieto[i] <- results$optim$bestmem[2]
  ter_prieto[i] <- results$optim$bestmem[3]
  vratio_prieto[i] <-   results$optim$bestmem[9]
  add_mean_prieto[i] <- results$optim$bestmem[10]
  add_sd_prieto[i] <- results$optim$bestmem[11]
  
  #meta-d
  tempDat$cj <- as.numeric(cut(tempDat$cj,5))
  fit <- computeMetaDa(as.factor(tempDat$cj),as.factor(tempDat$stim),as.factor(tempDat$cor))
  dprime_prieto[i] <- fit$Da
  mratio_prieto[i] <- fit$metaDa/fit$Da
}

#overview of all the fits
x <- data.frame(cbind(drift_prieto,bound_prieto,ter_prieto,vratio_prieto,add_mean_prieto,add_sd_prieto));names(x) <- c("drift","bound","ter","post-drift","add_mean","add_sd")
par(mfrow=c(1,1))
stripchart(x,at=1:6,jitter=.3, method = 'jitter',pch=21,vertical = TRUE,bg="grey",col='white',cex=1.5,ylim=range(x),frame=F,ylab="parameter value")

jpeg(file="Manuscript dynamic metad/prieto_results.jpg", res=600, width=400*3*(350/72), height=400*(350/72))
par(mfrow=c(1,3))
plot(mratio_prieto~vratio_prieto,frame=F,pch=21,cex=2,cex.lab=1.5,col="white",bg="black",ylab="M-ratio",xlab="vratio");cor.test(mratio_prieto,vratio_prieto);abline(lm(mratio_prieto~vratio_prieto),lty=2,lwd=2)
plot(mratio_prieto~bound_prieto,frame=F,pch=21,cex=2,cex.lab=1.5,col="white",bg="black",ylab="M-ratio",xlab="Decision bound");cor.test(mratio_prieto,bound_prieto);abline(lm(mratio_prieto~bound_prieto),lty=2,lwd=2)
plot(vratio_prieto~bound_prieto,frame=F,pch=21,cex=2,cex.lab=1.5,col="white",bg="black",ylab="vratio",xlab="Decision bound");cor.test(vratio_prieto,bound_prieto);abline(lm(vratio_prieto~bound_prieto),lty=2,lwd=2)
dev.off()  

#Generate model simulations
rm(Simuls);nsim <- 5000
for(i in 1:N){
  print(paste('simulating',i,'from',N))
  temp <- chi_square_optim_prieto(c(drift_prieto[i],bound_prieto[i],ter_prieto[i],.5,nsim,1,.001,conf_rt_prieto[i],vratio_prieto[i],add_mean_prieto[i],add_sd_prieto[i]),NA,0) 
  
  if(!exists('Simuls')){ Simuls <- cbind(temp,rep(i,nsim))
  }else{ Simuls <- rbind(Simuls,cbind(temp,rep(i,nsim)))
  }
}
Simuls <- data.frame(Simuls);names(Simuls) <- c('rt','cor','cj','sub')

#overlay RT and confidence distributions from data and simulations
jpeg(file="Manuscript dynamic metad/prieto_fit.jpg", res=600, width=600*2*(350/72), height=600*(350/72))
par(mfrow=c(1,2),mar=c(5.1,5.1,4.1,2.1))
tempC <- hist(Prieto$rt[Prieto$cor==1],breaks=seq(0,5,.05),xlim=c(0,3),prob=F,col=rgb(0,1,0,.25),border="white",ylab="Frequency",xlab="Reaction times (s)",cex.lab=2, cex.main=1.5, cex.axis=1.5,main="")
tempE <- hist(Prieto$rt[Prieto$cor==0],breaks=seq(0,5,.05),prob=F,add=T,col=rgb(1,0,0,.25),border='white')
Cors <- hist(Simuls$rt[Simuls$cor==1],breaks=seq(0,20,.05),plot=F)
Errs <- hist(abs(Simuls$rt[Simuls$cor==0]),breaks=seq(0,20,.05),plot=F)
lines(rescale(Cors$counts,to=c(0,max(tempC$counts)))~Cors$mids,type='l',col='green',lwd=3)
lines(rescale(Errs$counts,to=c(0,max(tempE$counts)))~Errs$mids,type='l',col='red',lwd=3)
legend("topright",fill=c("white","white","green","red"),border=F,legend=c("Simulated corrects","Simulated errors","Empirical corrects","Empirical errors"),col=rep(c("Green","Red"),2),bty='n',lwd=c(1,1,-1,-1))
#same for confidence
tempC <- hist(Prieto$cj[Prieto$cor==1],breaks=seq(1,6,.2),xlim=c(1,6),prob=F,col=rgb(0,1,0,.25),border="white",ylab="Frequency",xlab="Confidence",cex.lab=2, cex.main=1.5, cex.axis=1.5,main="")
tempE <- hist(Prieto$cj[Prieto$cor==0],breaks=seq(1,6,.2),prob=F,add=T,col=rgb(1,0,0,.25),border='white')
Cors <- hist(Simuls$cj[Simuls$cor==1],breaks=seq(-3,15,.2),plot=F)
Errs <- hist(abs(Simuls$cj[Simuls$cor==0]),breaks=seq(-3,15,.2),plot=F)
lines(Cors$counts*(dim(Prieto)[1]/dim(Simuls)[1])~Cors$mids,type='l',col='green',lwd=3)
lines(Errs$counts*(dim(Prieto)[1]/dim(Simuls)[1])~Errs$mids,type='l',col='red',lwd=3)
dev.off()
